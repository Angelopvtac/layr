name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build packages
        run: pnpm build

      - name: Run tests
        run: pnpm test

      - name: Run linting
        run: pnpm lint

      - name: Type check
        run: pnpm type-check

  validate-intents:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build core package
        run: pnpm --filter @layr/core build

      - name: Validate example intents
        run: |
          node -e "
          const { validateIntent } = require('./packages/core/dist/index.js');
          const fs = require('fs');
          const path = require('path');

          const examplesDir = './examples';
          const files = fs.readdirSync(examplesDir).filter(f => f.endsWith('.json'));

          let allValid = true;
          for (const file of files) {
            const content = fs.readFileSync(path.join(examplesDir, file), 'utf-8');
            const intent = JSON.parse(content);
            const result = validateIntent(intent);

            if (!result.valid) {
              console.error(\`❌ \${file} is invalid:\`, result.errors);
              allValid = false;
            } else {
              console.log(\`✅ \${file} is valid\`);
            }
          }

          if (!allValid) {
            process.exit(1);
          }
          "